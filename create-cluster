#!/bin/bash

CURRENT_STEP=${CURRENT_STEP:-1}
if (( $CURRENT_STEP <= 1 )); then
	# Apply initial Terraform configuration.
	echo "Step 1 of 7 - Creating infrastructure..."
	pushd ./terraform
	terraform apply
	if [ $? -ne 0 ]; then
		echo "Failed to create infrastructure."

		popd

		exit 1
	fi
	popd
	
	echo "Step 1 of 7 complete; infrastructure created."
	CURRENT_STEP=2
fi

if (( $CURRENT_STEP <= 2 )); then
	# Refresh Terraform state so inventory script functions correctly (needed to resolve public IPs)
	echo "Step 2 of 7 - Refreshing Terraform state..."
	pushd ./terraform
	terraform refresh
	if [ $? -ne 0 ]; then
		echo "Failed to refresh Terraform state."

		popd

		exit 1
	fi
	popd
	
	echo "Step 2 of 7 complete; Terraform state refreshed."
	CURRENT_STEP=3
fi

# Required by inventory plugin
export TERRAFORM_STATE_ROOT=$PWD

VAULT_PASSWORD_FILE=./security.vault.password.txt
VAULT_FILE=./security.vault.yml 

if (( $CURRENT_STEP <= 3 )); then
	echo "Step 3 of 7 - Configuring security..."
	./security-setup
	if [ $? -ne 0 ]; then
		echo "Failed to configure security."

		exit 1
	fi
	echo "Adding initial password to Ansible Vault..."
	ADMIN_PASSWORD=$(./bin/extract-admin-password.py)

	echo "$ADMIN_PASSWORD" > $VAULT_PASSWORD_FILE
	echo "ansible_ssh_pass: \"$ADMIN_PASSWORD\"" > $VAULT_FILE
	ansible-vault encrypt --vault-password-file=$VAULT_PASSWORD_FILE $VAULT_FILE

	echo "Step 3 of 7 complete; security configured."
	CURRENT_STEP=4
fi

if (( $CURRENT_STEP <= 4 )); then
	# Use SSH key file.
	echo "Step 4 of 7 - Configuring cluster machines to use SSH keyfile (initial password can be found in terraform/ddcloud-docker-swarm.tf)..."
	OLDPATH=$PATH

	# For OSX, use bundled sshpass
	OS_TYPE=$(uname -s)
	if [ "$OS_TYPE" = "Darwin" ]; then 
		PATH="$PATH:$PWD/bin"
	fi
	ansible all -e @$VAULT_FILE --vault-password-file=$VAULT_PASSWORD_FILE -m authorized_key -a "user=root key='{{ lookup('file', '$HOME/.ssh/id_rsa.pub') }}'" $VERBOSE_FLAGS
	if [ $? -ne 0 ]; then
		echo "Failed to configure SSH keys."

		echo "Removing temporary credentials..."
		rm -f $VAULT_FILE $VAULT_PASSWORD_FILE

		exit 1
	fi
	PATH=$OLDPATH

	echo "Removing temporary credentials..."
	rm -f $VAULT_FILE $VAULT_PASSWORD_FILE

	echo "Removing password for root..."
	ansible all -a 'passwd -d root'
	if [ $? -ne 0 ]; then
		echo "Failed to remove password for root."

		exit 1
	fi
	echo "Removed password for root..."

	echo "Step 4 of 7 complete; SSH keys configured."
	CURRENT_STEP=5
fi

if (( $CURRENT_STEP <= 5 )); then
	# Set host names.
	echo "Step 5 of 7 - configuring cluster machine host names..."
	ansible all -a "hostnamectl set-hostname {{ inventory_hostname }}" $VERBOSE_FLAGS
	if [ $? -ne 0 ]; then
		echo "Failed to configure cluster machine host names."

		exit 1
	fi
	ansible-playbook ./playbooks/reboot-servers.yml $VERBOSE_FLAGS
	if [ $? -ne 0 ]; then
		echo "Failed to reboot servers."

		exit 1
	fi
	echo "Step 5 of 7 complete; host-names configured."
	CURRENT_STEP=6
fi

# TODO: xfs_growfs /dev/centos/root

if (( $CURRENT_STEP <= 6 )); then
	# Upgrade all packages.
	echo "Step 6 of 7 - upgrading packages..."
	ansible-playbook ./playbooks/upgrade-packages.yml $VERBOSE_FLAGS
	if [ $? -ne 0 ]; then
		echo "Failed to upgrade packages."

		exit 1
	fi
	ansible-playbook ./playbooks/reboot-servers.yml $VERBOSE_FLAGS
	if [ $? -ne 0 ]; then
		echo "Failed to reboot servers."

		exit 1
	fi

	echo "Step 6 of 7 complete; packages upgraded."
	CURRENT_STEP=7
fi

if (( $CURRENT_STEP <= 7 )); then
	# Upgrade all packages.
	echo "Step 7 of 7 - installing components..."
	ansible-playbook -e @security.yml ./ddcloud-docker-swarm.yml $VERBOSE_FLAGS
	if [ $? -ne 0 ]; then
		echo "Failed to install components packages."

		exit 1
	fi
	echo "Step 7 of 7 complete; components installed."
	CURRENT_STEP=8
fi

exit 0
